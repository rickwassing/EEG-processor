function GroupAnalysis_plot(GLM)
% --------------------------------------------------
% Define colormaps for F and T images
CMap.F = load('colormap_roma.mat');
CMap.F = CMap.F.roma(128:end, :);
CMap.T = load('colormap_roma.mat');
CMap.T = CMap.T.roma;
% --------------------------------------------------
% Make figures of the design matrix and the topographic surface
plotDesignMatrix(GLM);
plotSurface(GLM.surface, GLM.chanlocs, [], [], false, fullfile(fileparts(GLM.filepath), 'images', 'surface.png'));
% --------------------------------------------------
% Plot topoplots for each F and T test
for i = 1:length(GLM.result)
    if isfield(GLM.result(i), 'f')
        for j = 1:length(GLM.result(i).f)
            switch GLM.poststats.Method
                case {'ClusterMass', 'ClusterExtent'}
                    p_cor = GLM.result(i).f(j).p_perm;
                    t_cor = GLM.poststats.ClusterAlpha;
                case 'TFCE'
                    p_cor = GLM.result(i).f(j).p_perm;
                    t_cor = GLM.poststats.ChanWiseAlpha;
                case 'FDR'
                    p_cor = GLM.result(i).f(j).p_fdr;
                    t_cor = GLM.poststats.ChanWiseAlpha;
                otherwise
                    p_cor = ones(size(GLM.result(i).f(j).p_unc));
                    t_cor = GLM.poststats.ChanWiseAlpha;
            end
            p_unc = GLM.result(i).f(j).p_unc;
            t_unc = GLM.poststats.ChanWiseAlpha;
            H = plotGroupStatTopoplot(...
                [], ...
                GLM.result(i).f(j).stat, ...
                p_unc, ...
                p_cor, ...
                t_unc, ...
                t_cor, ...
                GLM.chanlocs, ...
                GLM.surface, ...
                'clusters', GLM.result(i).f(j).cluster, ...
                'FigPosition', [50 50 255 255], ...
                'Colormap', CMap.F, ...
                'CBarLabel', 'F statistic', ...
                'CLim', [0, Inf], ...
                'doSave', true, ...
                'outpath', fullfile(fileparts(GLM.filepath), 'images', sprintf('result_f_m%i_c%i.png', i, j)));
            close all
        end
    end
    for j = 1:length(GLM.result(i).t)
        switch GLM.stats.Ttests.Sided{j}
            case 'one'
                sided = 1;
            case 'two'
                sided = 2;
        end
        switch GLM.poststats.Method
            case {'ClusterMass', 'ClusterExtent'}
                p_cor = GLM.result(i).t(j).p_perm;
                t_cor = GLM.poststats.ClusterAlpha/sided;
            case 'TFCE'
                p_cor = GLM.result(i).t(j).p_perm;
                t_cor = GLM.poststats.ChanWiseAlpha/sided;
            case 'FDR'
                p_cor = GLM.result(i).t(j).p_fdr;
                t_cor = GLM.poststats.ChanWiseAlpha/sided;
            otherwise
                p_cor = ones(size(GLM.result(i).t(j).cope));
                t_cor = 0.05.*ones(size(GLM.result(i).t(j).cope))/sided;
        end
        p_unc = GLM.result(i).t(j).p_unc;
        t_unc = GLM.poststats.ChanWiseAlpha/sided;
        H = plotGroupStatTopoplot(...
            GLM.result(i).t(j).cope, ...
            GLM.result(i).t(j).stat, ...
            p_unc, ...
            p_cor, ...
            t_unc, ...
            t_cor, ...
            GLM.chanlocs, ...
            GLM.surface, ...
            'clusters', GLM.result(i).t(j).cluster, ...
            'FigPosition', [50 50 510 255], ...
            'Colormap', CMap.T, ...
            'CBarLabel', 'T statistic', ...
            'CLim', [-3.1, 3.1], ...
            'doSave', true, ...
            'outpath', fullfile(fileparts(GLM.filepath), 'images', sprintf('result_t_m%i_c%i.png', i, j)));
        close all
    end
end

close all

end