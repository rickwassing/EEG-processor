function EEG = Import_PhysioFilter(EEG)
% =========================================================================
% FILTER EOG
% -------------------------------------------------------------------------
% Find channel indices
chanIdx = ...
    strcmpi({EEG.chanlocs.type}, 'EOG') | ...
    strcmpi({EEG.chanlocs.type}, 'VEOG') | ...
    strcmpi({EEG.chanlocs.type}, 'HEOG');
% If any channels have been found ...
if any(chanIdx)
    fprintf('>> BIDS: 0.3 to 25 Hz bandpass filter on %i EOG channels\n', sum(chanIdx))
    % Extract the channels and filter the data
    tmppns = pop_firws(...
        pop_select(EEG, 'channel', find(chanIdx)), ...
        'fcutoff', [0.3, 25], ...
        'ftype', 'bandpass', ...
        'wtype', 'hamming', ...
        'forder', pop_firwsord('hamming', EEG.srate, 0.5), ...
        'minphase', 0);
    % Replace original data with filtered data
    EEG.data(chanIdx, :) = tmppns.data;
end
% =========================================================================
% FILTER EMG
% -------------------------------------------------------------------------
% Find channel indices
chanIdx = strcmpi({EEG.chanlocs.type}, 'EMG');
% If any channels have been found ...
if any(chanIdx)
    fprintf('>> BIDS: 10 to %.2f Hz bandpass filter on %i rectified EMG channels\n', min([100, (tmppns.srate-1)/2]), sum(chanIdx))
    % Extract the channels
    tmppns = pop_select(EEG, 'channel', find(chanIdx));
    % Rectify the signal
    tmppns.data = abs(tmppns.data - repmat(mean(tmppns.data, 2), 1, EEG.pnts));
    % Filter the data
    tmppns = pop_firws(...
        tmppns, ...
        'fcutoff', [10, min([100, (tmppns.srate-1)/2])], ...
        'ftype', 'bandpass', ...
        'wtype', 'hamming', ...
        'forder', pop_firwsord('hamming', EEG.srate, 5), ...
        'minphase', 0);
    % Replace original data with filtered data
    EEG.data(chanIdx, :) = tmppns.data;
end
% =========================================================================
% FILTER ECG
% -------------------------------------------------------------------------
% Find channel indices
chanIdx = strcmpi({EEG.chanlocs.type}, 'ECG');
% If any channels have been found ...
if any(chanIdx)
    fprintf('>> BIDS: 0.3 to 70 Hz bandpass filter on %i ECG channels\n', sum(chanIdx))
    % Extract the channels and filter the data
    tmppns = pop_firws(...
        pop_select(EEG, 'channel', find(chanIdx)), ...
        'fcutoff', [0.3, 70], ...
        'ftype', 'bandpass', ...
        'wtype', 'hamming', ...
        'forder', pop_firwsord('hamming', EEG.srate, 0.5), ...
        'minphase', 0);
    % Replace original data with filtered data
    EEG.data(chanIdx, :) = tmppns.data;
end
% =========================================================================
% FILTER Respiratory
% -------------------------------------------------------------------------
% Find channel indices
chanIdx = strcmpi({EEG.chanlocs.type}, 'Respiratory');
% If any channels have been found ...
if any(chanIdx)
    fprintf('>> BIDS: 0.1 to 15 Hz bandpass filter on %i respiratory channels\n', sum(chanIdx))
    % Extract the channels and filter the data
    tmppns = pop_firws(...
        pop_select(EEG, 'channel', find(chanIdx)), ...
        'fcutoff', [0.1, 15], ...
        'ftype', 'bandpass', ...
        'wtype', 'hamming', ...
        'forder', pop_firwsord('hamming', EEG.srate, 0.2), ...
        'minphase', 0);
    % Replace original data with filtered data
    EEG.data(chanIdx, :) = tmppns.data;
end
% =========================================================================
% FILTER Nasal Pressure
% -------------------------------------------------------------------------
% Find channel indices
chanIdx = strcmpi({EEG.chanlocs.type}, 'NasalPressure');
% If any channels have been found ...
if any(chanIdx)
    fprintf('>> BIDS: 0.03 to %.2f Hz bandpass filter on %i nasal pressure channels\n', min([100, (tmppns.srate-1)/2]), sum(chanIdx))
    % Extract the channels and filter the data
    tmppns = pop_firws(...
        pop_select(EEG, 'channel', find(chanIdx)), ...
        'fcutoff', [0.03, min([100, (tmppns.srate-1)/2])], ...
        'ftype', 'bandpass', ...
        'wtype', 'hamming', ...
        'forder', pop_firwsord('hamming', EEG.srate, 0.06), ...
        'minphase', 0);
    % Replace original data with filtered data
    EEG.data(chanIdx, :) = tmppns.data;
end
% =========================================================================
% FILTER Snoring
% -------------------------------------------------------------------------
% Find channel indices
chanIdx = strcmpi({EEG.chanlocs.type}, 'Snoring');
% If any channels have been found ...
if any(chanIdx)
    fprintf('>> BIDS: 10 to %.2f Hz bandpass filter on %i snoring channels\n', min([100, (tmppns.srate-1)/2]), sum(chanIdx))
    % Extract the channels and filter the data
    tmppns = pop_firws(...
        pop_select(EEG, 'channel', find(chanIdx)), ...
        'fcutoff', [10, min([100, (tmppns.srate-1)/2])], ...
        'ftype', 'bandpass', ...
        'wtype', 'hamming', ...
        'forder', pop_firwsord('hamming', EEG.srate, 5), ...
        'minphase', 0);
    % Replace original data with filtered data
    EEG.data(chanIdx, :) = tmppns.data;
end

end
